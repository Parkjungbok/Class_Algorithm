namespace _01.List
{
    internal class Program
    {
        /* 리스트
         * 
         * 런타임 중 크기를 확장할 수 있는 배열기반의 자료구조
         * 배열요소의 갯수를 특정할 수 없는 경우 사용이 용이
         */

        //리스트 구현
        //리스트는 배열기반의 자료구조이며, 배열은 크기를 변경할 수 없는 자료구조
        //리스트는 동작 중 크기를 화장하기 위해 포함한 데이터보다 더욱 큰 배열을 사용


        //리스트 삽입
        //중간에 데이터를 추가하기 위해 이후 데이터들을 뒤로 밀어내고 삽입 진행


        //리스트 삭제
        //중간에 데이터를 삭제한 뒤 빈자리를 채우기 위해 이후 데이터들을 앞으로 당김


        //리스트 용량
        //용량을 가득 채운 상황에서 데이터를 추가하는 경우
        //더 큰 용량의 배열을 새로 생성한 뒤 데이터를 복사하여 새로운 배열을 사용
        //  1. 리스트가 가득찬 상황에서 새로운 데이터 추가 시도
        //  2. 새로운 더 큰 배열 생성
        //  3. 새로운 배열에 기존의 데이터 복사


        //리스트 시간복잡도
        //  접근 : 0(1)
        //  탐색 : 0(n)
        //  삽입 : 0(n)
        //  삭제 : 0(n)


        static void Main77(string[] args)
        {            
            List<int> list1 = new List<int>();
            list1.Capacity = 100000;                    // Capacity 총크기
            for (int i=0; i <100000; i++)
            {
                list1.Add(i);
            } // 양을 미리 알수 있다면 처음부터 미리 쓸거같은 양을 기정
                        
            int[] array = new int[5];                   // 고정적인 숫자일때
            List<string> list = new List<string>();     // 유동적인 상황일때
             

            // 추가
            list.Add("0번째 데이터");
            list.Add("1번째 데이터");
            list.Add("2번째 데이터");
            list.Add("3번째 데이터");                    // 0(1)
            list.Add("4번째 데이터");                    // add 일반적으로
            list.Insert(1, "중간 데이터 1에 추가");      // Insert 원하는 위치에 추가
            list.Insert(3, "중간 데이터 3에 추가");      // 0(n)

            // 삭제
            list.Remove("2번째 데이터");                 // 삭제시 순서를 땡겨옴
            list.RemoveAt(2);                           // RemoveAT(); 특정 번호를 삭제

            list.Remove("7번재 데이터");                 // 데이터가 없을시 오류는 아님
                                                        // bool false

            // 접근
            list[0] = "수정된 0번 데이터";
            string text = list[2];

            // 탐색
            list.IndexOf("4번째 데이터");                // 

        }
    }
}
